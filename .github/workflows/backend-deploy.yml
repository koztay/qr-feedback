name: Backend Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker system prune -af
            docker volume prune -f

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Create production env file
        run: |
          cat << EOF > infrastructure/.env.production
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=municipal_feedback
          NODE_ENV=production
          PORT=3000
          DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/municipal_feedback?schema=public
          EOF

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "infrastructure/docker-compose.prod.yml,infrastructure/.env.production"
          target: "/app"
          strip_components: 1

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,IMAGE_NAME
          script: |
            cd /app
            # Stop all services
            docker-compose -f docker-compose.prod.yml down
            # Start postgres first
            docker-compose -f docker-compose.prod.yml up -d postgres
            # Wait a bit for postgres to initialize
            sleep 30
            # Start backend
            docker-compose -f docker-compose.prod.yml up -d backend
            # Check services
            docker-compose -f docker-compose.prod.yml ps

  database-migrations:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn workspace backend install

      - name: Wait for database to be ready
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to be ready..."
            until docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -h postgres -p 5432 -U postgres; do
              echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done
            echo "PostgreSQL is ready!"

      - name: Run database migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            # URL encode the password and construct the database URL
            docker-compose -f docker-compose.prod.yml exec -T backend sh -c '
              ENCODED_PASSWORD=$(echo $POSTGRES_PASSWORD | sed "s|/|%2F|g" | sed "s|=|%3D|g")
              export DATABASE_URL="postgresql://postgres:$ENCODED_PASSWORD@postgres:5432/municipal_feedback"
              echo "Using database URL: $DATABASE_URL"
              yarn prisma migrate deploy
            '

      - name: Seed translations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            # URL encode the password and run seeding
            docker-compose -f docker-compose.prod.yml exec -T backend sh -c '
            ENCODED_PASSWORD=$(echo $POSTGRES_PASSWORD | sed "s|/|%2F|g" | sed "s|=|%3D|g")
            export DATABASE_URL="postgresql://postgres:$ENCODED_PASSWORD@postgres:5432/municipal_feedback"
            echo "Running seed translations..."
            cd /app/backend && node dist/scripts/seed-translations.js
            ' 